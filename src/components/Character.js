import { useEffect, useState } from 'react';
import './Character.css';

function Character({ userId, firstName }) {
  const [characterData, setCharacterData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const API_BASE_URL = 'https://55b5-37-57-145-0.ngrok-free.app';

  useEffect(() => {
    const controller = new AbortController();

    const fetchCharacter = async () => {
      try {
        const res = await fetch(
          `${API_BASE_URL}/api/get_character/${userId}?firstname=${encodeURIComponent(firstName)}`,
          {
            signal: controller.signal,
            headers: { 'ngrok-skip-browser-warning': '1' },
          }
        );
        if (res.ok) {
          const data = await res.json();
          setCharacterData(data);
        } else {
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
        }
      } catch (err) {
        if (err.name !== 'AbortError') {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', err);
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
        }
      } finally {
        setLoading(false);
      }
    };

    fetchCharacter();

    return () => controller.abort();
  }, [userId, firstName]);

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...</div>;
  if (error) return <div style={{ color: 'red' }}>{error}</div>;
  if (!characterData) return <div>–î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</div>;

  return (
    <div className="character-container">
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å */}
      <div className="character-name">
        {characterData.name} [{characterData.level}]
      </div>

      {/* –†–∞—Å–∫–ª–∞–¥–∫–∞ —è—á–µ–µ–∫ */}
      <div className="inventory-grid">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
        <div className="cell top-left">üõ°Ô∏è</div>
        <div className="cell middle-left">üíç</div>
        <div className="cell bottom-left">üó°Ô∏è</div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        <div className="cell middle-center">
          <img src={characterData.avatar_url} alt="Character" className="avatar-img" />
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
        <div className="cell top-right">üöú</div>
        <div className="cell middle-right">üîß</div>
        <div className="cell bottom-right">üõ†Ô∏è</div>

        {/* –ù–∏–∂–Ω–∏–µ —Å–ª–æ—Ç—ã */}
        <div className="bottom-slots">
          <div className="slot">üíé</div>
          <div className="slot">‚ù§Ô∏è</div>
          <div className="slot">üíñ</div>
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ */}
      <div className="avatar-wrapper">
        <img src={characterData.avatar_url} alt="–ü–µ—Ä—Å–æ–Ω–∞–∂" className="avatar-img" />
      </div>

      <div className="stats">
        <p>–°–∏–ª–∞: {characterData.strength}</p>
        <p>–õ–æ–≤–∫–æ—Å—Ç—å: {characterData.agility}</p>
        <p>–£–¥–∞—á–∞: {characterData.luck}</p>
        <p>–ó–¥–æ—Ä–æ–≤—å–µ: {characterData.health}</p>
      </div>

      <div className="buttons-container">
        <button>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</button>
        <button>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
      </div>
    </div>
  );
}

export default Character;